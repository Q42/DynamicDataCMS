@model EditViewModel
@{
    ViewData["Title"] = Model.SchemaLocation.Name;
}

@section ScriptsHead
{
    <script src="~/_content/QMS.Core/jsoneditor.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dompurify@@latest/dist/purify.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@trevoreyre/autocomplete-js@latest/dist/autocomplete.min.js"></script>
}

@section Scripts
{
    @if (Model.CmsConfiguration.EditScripts?.Any() ?? false)
    {
        @foreach (var scriptUrl in Model.CmsConfiguration.EditScripts!)
        {
            <script src="@scriptUrl"></script>
        }
    }
    <script type="text/javascript">
    var editor = null;
    (function () {
        JSONEditor.defaults.options.ajax = true;
        JSONEditor.defaults.options.theme = 'bootstrap4';
        JSONEditor.defaults.options.no_additional_properties = true;
        JSONEditor.defaults.options.disable_collapse = true;
        JSONEditor.defaults.options.disable_edit_json = true;
        JSONEditor.defaults.options.disable_properties = true;

        JSONEditor.defaults.callbacks = {
  "autocomplete": {
    // This is callback functions for the "autocomplete" editor
    // Note: 1st parameter in callback is ALWAYS a reference to the current editor.
     "search_autocomplete": function search(jseditor_editor, input, test) {
      var itemType = jseditor_editor.parent.options.itemType;
      var url = '@Url.Action("Search", "Api")' + '/'+ itemType + '?q=' + encodeURI(input);

      return new Promise(function (resolve) {
        if (input.length < 3) {
          return resolve([]);
        }

        fetch(url).then(function (response) {
          return response.json();
        }).then(function (data) {
          resolve(data);
        });
      });
    },
    "getResultValue_autocomplete": function getResultValue(jseditor_editor, result) {
      return result.title;
    },
     "onSubmit_autocomplete": function onSubmitValue(jseditor_editor, result) {
         jseditor_editor.parent.editors.id.setValue(result.id);
    },
    "renderResult_autocomplete": function(jseditor_editor, result, props) {
      return ['<li ' + props + '>',
        '<div class="title">' + result.title + '</div>',
        '</li>'].join('');
    }
  }
        };


         // Specify upload handler
        JSONEditor.defaults.options.upload = function (type, file, cbs) {
            console.log(type);
            var url = '@Url.Action("Upload", "File", new { cmsType = Model.CmsType, id = Model.Id, lang = Model.Language })';
            url += '?fieldName=' + type.substr(5); //remote root. from typename
            var formData = new FormData();
            formData.set("file", file , file.name);

            fetch(url, { // Your POST endpoint
    method: 'POST',
    //headers: {
    //  // Content-Type may need to be completely **omitted**
    //  // or you may need something
    //  "Content-Type": "multipart/form-data"
    //},
    body: formData // This is your file object
  }).then(
    response => response.json() // if the response is a JSON object
  ).then(
      filename => { console.log(filename);  cbs.success(filename); } // Handle the success response object
  ).catch(
    error => console.log(error) // Handle the error response object
  );
          //var tick = 0;

          //var tickFunction = function() {
          //  tick += 1;
          //  console.log('progress: ' + tick);

          //  if (tick < 100) {
          //    cbs.updateProgress(tick);
          //    window.setTimeout(tickFunction, 50)
          //  } else if (tick == 100) {
          //    cbs.updateProgress();
          //    window.setTimeout(tickFunction, 500)
          //  } else {
          //    cbs.success('http://www.example.com/images/' + file.name);
          //  }
          //};

          //window.setTimeout(tickFunction);
      };

        // Initialize the editor
        editor = new JSONEditor(document.getElementById("editor_holder"), {
            iconlib: "fontawesome5",
            schema:
                @Html.Raw(Model.SchemaLocation.Schema?.ToString())

        });

        @if (Model.Data != null)
        {
            <text>
            editor.on('ready',function() {
                editor.setValue(@Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Data)));
            });

            </text>
        }

        })();

        (function() {
            var allimgs = document.images;
            for (var i = 0; i < allimgs.length; i++) {
                allimgs[i].onerror = function() {
                    this.style.visibility = "hidden"; // Other elements aren't affected. 
                }
                 allimgs[i].onload = function() {
                    this.style.visibility = ""; // Other elements aren't affected. 
                }
            }
        })();

        function save() {

            // Validate
            var errors = editor.validate();
            if(errors.length) {
              // Not valid
                editor.setOption('show_errors', 'always');
                new Noty({ text: 'Please fix all validation errors.', type: 'warning', timeout: 2000, theme: 'bootstrap-v4', progressBar: true }).show();
                return;
            }

        var data = editor.getValue();

        //console.log('saving');
        //alert(data);

        fetch('@Url.Action("Save", "Api", new { cmsType = Model.CmsType, id = Model.Id, lang = Model.Language })', {
            method: 'POST', // *GET, POST, PUT, DELETE, etc.
            //mode: 'cors', // no-cors, cors, *same-origin
            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
            //credentials: 'same-origin', // include, *same-origin, omit
            headers: {
                'Content-Type': 'application/json',
                // 'Content-Type': 'application/x-www-form-urlencoded',
            },
            //redirect: 'follow', // manual, *follow, error
            //referrer: 'no-referrer', // no-referrer, *client
            body: JSON.stringify(data), // body data type must match "Content-Type" header
        })
        .then( response => {
            if (!response.ok) { throw response }
            return response.json()  //we only get here if there is no error
         })
        .then( json => {
            new Noty({ text: 'Save success', type: 'success', timeout: 2000, theme: 'bootstrap-v4', progressBar: true }).show();
        })
        .catch( err => {
            new Noty({ text: 'Save failed', type: 'error', timeout: 2000, theme: 'bootstrap-v4', progressBar: true }).show();
        })

    }

        function load() {

            return fetch('@Url.Action("Load", "Api", new { cmsType = Model.CmsType, id = Model.Id, lang = Model.Language })', {
                method: 'GET', // *GET, POST, PUT, DELETE, etc.
                //mode: 'cors', // no-cors, cors, *same-origin
                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
                //credentials: 'same-origin', // include, *same-origin, omit
                //headers: {
                //    'Content-Type': 'application/json',
                //    // 'Content-Type': 'application/x-www-form-urlencoded',
                //},
                //redirect: 'follow', // manual, *follow, error
                //referrer: 'no-referrer', // no-referrer, *client
                //body: JSON.stringify(data), // body data type must match "Content-Type" header
            })
                .then(response => response.json())
                .then(data => {editor.setValue(data) });
        }

    </script>
}
<div>
    <h1 class="display-4">@Model.SchemaLocation.Name</h1>

    @if (Model.CmsConfiguration?.Languages?.Any() ?? false)
    {
        <ul class="nav">
            <li class="nav-item">
                <a class="nav-link" href="@Url.Action("Edit", "Home", new { lang = "" })">Default Language</a>
            </li>
            @foreach (string lang in Model.CmsConfiguration?.Languages ?? Enumerable.Empty<string>())
            {
                <li class="nav-item">
                    <a class="nav-link" href="@Url.Action("Edit", "Home", new { lang = @lang })">@lang</a>
                </li>
            }
        </ul>
    }


    <button onclick="javascript:load()" class="btn btn-warning">Reload data</button>
    <button id="saveButton" onclick="javascript:save()" class="btn btn-primary">Save</button>

    <div id='editor_holder'></div>

</div>
